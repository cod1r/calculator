{"version":3,"sources":["functions/test_functions.tsx","components/ExpressionInput.tsx","components/Calculator.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["evaluate","expr","exp","i","length","NaN","opening_p","push","pop","expression","operators","temp","one","two","op","undefined","t","counter","Error","postfix","values","tmp","isNaN","parseInt","parseFloat","v1","v2","Math","pow","ExpressionInput","props","useState","setExpr","answer","setAns","useEffect","className","type","onChange","e","target","value","history","index","changeDisp","onKeyDown","key","del","onFocus","match","Calculator","setExp","setHist","displayExp","setDispExp","splice","id","Context","input","onError","MathJax","error","console","warn","log","Hub","Queue","Typeset","script","options","asciimath2jax","useMathMLspacing","delimiters","preview","styles","display","Text","text","copy","onClick","map","x","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QA8BaA,EAAW,SAACC,GAErB,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IACb,MAAZF,EAAKE,KAGTD,GAAOD,EAAKE,IAGhB,OAAOD,EAAIA,EAAIE,OAAO,IAClB,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IAAK,OAAOC,IAKpB,IADA,IAAIC,EAA4B,GACvBH,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IACb,MAAXD,EAAIC,GACJG,EAAUC,KAAKL,EAAIC,IAEH,MAAXD,EAAIC,IAAcG,EAAUF,OAAS,GAAuC,MAAlCE,EAAUA,EAAUF,OAAO,IAC1EE,EAAUE,MAIlB,GAAIF,EAAUF,OAAS,EAAG,OAAOC,IAKjC,IAHA,IAAII,EAA4B,GAAIC,EAA2B,GAAIC,EAAe,GAGzER,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAE5B,GAAe,MAAXD,EAAIC,GAIR,GAAe,MAAXD,EAAIC,GAkCR,GAAe,MAAXD,EAAIC,IAAyB,MAAXD,EAAIC,IAAyB,MAAXD,EAAIC,IAA0B,MAAXD,EAAIC,IAAcQ,EAAKP,OAAS,GAAiB,MAAXF,EAAIC,GAAW,CAM5G,GAJIQ,EAAKP,OAAS,IACdK,EAAWF,KAAKI,GAChBA,EAAO,IAEPF,EAAWL,QAAU,EAAE,CAEvB,GAAIM,EAAUN,OAAS,GAAuC,MAAlCM,EAAUA,EAAUN,OAAO,GAAW,CAC9D,IAAIQ,EAA2BH,EAAWD,MACtCK,EAA2BJ,EAAWD,MACtCM,EAA0BJ,EAAUF,WAC5BO,IAARH,QAA6BG,IAARF,QAA4BE,IAAPD,GAC1CL,EAAWF,KAAKM,EAAM,IAAMD,EAAME,GAG1C,GAAIJ,EAAUN,OAAS,IAAwC,MAAlCM,EAAUA,EAAUN,OAAO,IAAgD,MAAlCM,EAAUA,EAAUN,OAAO,KAA0B,MAAXF,EAAIC,GAAW,CAC3H,IAAIS,EAA2BH,EAAWD,MACtCK,EAA2BJ,EAAWD,MACtCM,EAA0BJ,EAAUF,WAC5BO,IAARH,QAA6BG,IAARF,QAA4BE,IAAPD,GAC1CL,EAAWF,KAAKK,EAAM,IAAMC,EAAMC,GAG1C,GAAIJ,EAAUN,OAAS,IAAwC,MAAlCM,EAAUA,EAAUN,OAAO,IAAgD,MAAlCM,EAAUA,EAAUN,OAAO,KAA0B,MAAXF,EAAIC,IAAyB,MAAXD,EAAIC,IAAyB,MAAXD,EAAIC,GAAY,CAChK,IAAIS,EAA2BH,EAAWD,MACtCK,EAA2BJ,EAAWD,MACtCM,EAA0BJ,EAAUF,WAC5BO,IAARH,QAA6BG,IAARF,QAA4BE,IAAPD,GAC1CL,EAAWF,KAAKM,EAAM,IAAMD,EAAME,IAI9CJ,EAAUH,KAAKL,EAAIC,SAGnBQ,GAAQT,EAAIC,OAtEhB,CAKI,GAJIQ,EAAKP,OAAS,IACdK,EAAWF,KAAKI,GAChBA,EAAO,IAE2B,MAAlCD,EAAUA,EAAUN,OAAO,GAC3B,KAAOM,EAAUN,OAAS,GAAuC,MAAlCM,EAAUA,EAAUN,OAAO,IAAW,CACjE,IAAIQ,EAA2BH,EAAWD,MACtCK,EAA2BJ,EAAWD,MACtCM,EAA0BJ,EAAUF,MACxC,QAAYO,IAARH,QAA6BG,IAARF,QAA4BE,IAAPD,EAC1C,OAAOA,GACH,IAAK,IACL,IAAK,IACL,IAAK,IAAKL,EAAWF,KAAKM,EAAM,IAAMD,EAAME,GAAK,MACjD,IAAK,IACL,IAAK,IAAKL,EAAWF,KAAKK,EAAM,IAAMC,EAAMC,QAMvD,CACD,IAAIE,EAAyBP,EAAWD,WAC9BO,IAANC,IACAL,EAAOK,GAIuB,MAAlCN,EAAUA,EAAUN,OAAO,IAC3BM,EAAUF,WAjCdE,EAAUH,KAAKL,EAAIC,IA4EvBQ,EAAKP,OAAS,GAEdK,EAAWF,KAAKI,GAIpB,IADA,IAAIM,EAAU,EACPP,EAAUN,OAAS,GAAKK,EAAWL,QAAU,GAAE,CAElD,KADAa,GACe,IACX,MAAM,IAAIC,MAAM,YAEpB,GAAIR,EAAUN,OAAS,GAAuC,MAAlCM,EAAUA,EAAUN,OAAO,GAAY,CAC/D,IAAIQ,EAA2BH,EAAWD,MACtCK,EAA2BJ,EAAWD,MACtCM,EAA0BJ,EAAUF,WAC5BO,IAARH,QAA6BG,IAARF,QAA4BE,IAAPD,GAC1CL,EAAWF,KAAKM,EAAM,IAAMD,EAAME,GAG1C,GAAIJ,EAAUN,OAAS,IAAwC,MAAlCM,EAAUA,EAAUN,OAAO,IAAgD,MAAlCM,EAAUA,EAAUN,OAAO,IAAY,CACzG,IAAIQ,EAA2BH,EAAWD,MACtCK,EAA2BJ,EAAWD,MACtCM,EAA0BJ,EAAUF,WAC5BO,IAARH,QAA6BG,IAARF,QAA4BE,IAAPD,GAC1CL,EAAWF,KAAKK,EAAM,IAAMC,EAAMC,GAG1C,GAAIJ,EAAUN,OAAS,IAAwC,MAAlCM,EAAUA,EAAUN,OAAO,IAAgD,MAAlCM,EAAUA,EAAUN,OAAO,IAAa,CAC1G,IAAIQ,EAA2BH,EAAWD,MACtCK,EAA2BJ,EAAWD,MACtCM,EAA0BJ,EAAUF,WAC5BO,IAARH,QAA6BG,IAARF,QAA4BE,IAAPD,GAC1CL,EAAWF,KAAKM,EAAM,IAAMD,EAAME,IAO9C,IAAIK,EAA8BV,EAAWD,MACzCY,EAAwB,GAAIC,EAAc,GAC9C,QAAgBN,IAAZI,EACA,IAAK,IAAIhB,EAAI,EAAGA,EAAIgB,EAAQf,OAAQD,IAEhC,GAAIiB,EAAOhB,OAAS,IAAqB,MAAfe,EAAQhB,IAA8B,MAAfgB,EAAQhB,KAAekB,EAAIjB,OAAS,GAAKkB,MAAMC,SAASJ,EAAQhB,EAAE,MAAQA,EAAI,IAAMgB,EAAQf,SAA2B,MAAfe,EAAQhB,IAA6B,MAAfgB,EAAQhB,IAA6B,MAAfgB,EAAQhB,IAAa,CAClNkB,EAAIjB,OAAS,IACbgB,EAAOb,KAAKiB,WAAWH,IACvBA,EAAM,IAEV,IAAII,EAAyBL,EAAOZ,MAChCkB,EAAyBN,EAAOZ,MAEpC,QAAWO,IAAPU,QAA2BV,IAAPW,EACpB,OAAQP,EAAQhB,IACZ,IAAK,IACDiB,EAAOb,KAAKmB,EAAKD,GACjB,MACJ,IAAK,IACDL,EAAOb,KAAKmB,EAAKD,GACjB,MACJ,IAAK,IACDL,EAAOb,KAAKkB,EAAKC,GACjB,MACJ,IAAK,IACDN,EAAOb,KAAKkB,EAAKC,GACjB,MACJ,IAAK,IACDN,EAAOb,KAAKoB,KAAKC,IAAIF,EAAID,SAOjB,MAAfN,EAAQhB,GACTkB,EAAIjB,OAAS,IACbgB,EAAOb,KAAKiB,WAAWH,IACvBA,EAAM,IAGVA,GAAOF,EAAQhB,GAO3B,OAHsB,IAAlBiB,EAAOhB,aAA4BW,IAAZI,GACvBC,EAAOb,KAAKiB,WAAWL,IAEpBC,EAAO,I,MC5LHS,MAvCf,SAAyBC,GAAa,IAAD,EACXC,mBAAS,IADE,mBAC5B9B,EAD4B,KACtB+B,EADsB,OAEVD,mBAAS,GAFC,mBAE5BE,EAF4B,KAEpBC,EAFoB,KAOnC,OAJAC,qBAAU,WACRH,EAAQF,EAAM7B,MACdiC,EAAOJ,EAAM9B,SAAS8B,EAAM7B,SAC3B,CAAC6B,EAAM7B,OAER,sBAAKmC,UAAU,YAAf,UACE,uBACMC,KAAK,OACLD,UAAU,KACVE,SACQ,SAACC,GACGP,EAAQO,EAAEC,OAAOC,OACjBP,EAAOJ,EAAM9B,SAASuC,EAAEC,OAAOC,QAC/BX,EAAMY,QAAQZ,EAAMa,OAASJ,EAAEC,OAAOC,MACtCX,EAAMc,WAAWL,IAG7BE,MAAOxC,EACP4C,UACQ,SAACN,GACiB,cAAVA,EAAEO,KAAuC,IAAhB7C,EAAKG,QAC9B0B,EAAMiB,IAAIjB,EAAMa,QAIhCK,QAASlB,EAAMc,aAErB,qBAAKR,UAAU,SAAf,SACGnC,EAAKG,OAAS,IAAMH,EAAKgD,MAAM,qBAA6BlC,IAAXkB,IAAyBX,MAAMW,GAC7E,KAAOA,EACP,S,sBCuFGiB,MAhHf,WAAuB,IAAD,EAC2BnB,mBAAS,IADpC,mBACXtB,EADW,KACC0C,EADD,OAEuBpB,mBAAS,GAFhC,mBAEXE,EAFW,KAEHC,EAFG,OAG6BH,mBAAS,IAHtC,mBAGXW,EAHW,KAGFU,EAHE,OAI+BrB,mBAAS,IAJxC,mBAIXsB,EAJW,KAICC,EAJD,KAMZP,EAAM,SAAC5C,GACTuC,EAAQa,OAAOpD,EAAG,GAClBiD,EAAQ,YAAIV,KAGVE,EAAa,SAACL,GAChBe,EAAW,KAAKf,EAAEC,OAAOC,MAAM,OAGrC,OACE,sBAAKe,GAAG,OAAR,UACI,qBAAKA,GAAG,UAAR,SACI,cAAC,IAAQC,QAAT,CACIC,MAAM,QACNC,QAAU,SAACC,EAAeC,GACtBC,QAAQC,KAAKF,GACbC,QAAQE,IAAI,yDACZJ,EAAQK,IAAIC,MACRN,EAAQK,IAAIE,YAGpBC,OAAO,sFACPC,QAAU,CACNC,cAAe,CACXC,kBAAkB,EAClBC,WAAY,CAAC,CAAC,KAAK,OACnBC,QAAS,QAEbC,OAAQ,CACJ,mBAAoB,CAChBC,QAAS,UAlBzB,SAuBI,cAAC,IAAQC,KAAT,CAAcC,KAAOxB,QAG7B,sBAAKjB,UAAU,YAAf,UACI,uBACIC,KAAK,OACLD,UAAU,KACVoB,GAAG,OACHR,QAASJ,EACTN,SAAU,SAACC,GACHY,EAAOZ,EAAEC,OAAOC,OAChBP,EAAOlC,EAASuC,EAAEC,OAAOC,QACzBG,EAAWL,IAGnBE,MAAOhC,EACPoC,UACI,SAACN,GACG,GAAc,UAAVA,EAAEO,IAAiB,CACnB,IAAIgC,EAAgB,YAAOpC,GAC3BoC,EAAKvE,KAAKE,GACV2C,EAAQ0B,OAKxB,qBAAK1C,UAAU,SAAf,SACI3B,EAAWL,OAAS,IACnBK,EAAWwC,MAAM,qBACPlC,IAAXkB,IACCX,MAAMW,GAAU,KAAOA,EAAS,QAEzC,qBAAKuB,GAAG,aAAR,SACI,sBAAKA,GAAG,UAAR,UACI,wBAAQuB,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,GAAIyB,EAAOlC,EAASS,EAAa,KAA9E,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,KAAMyB,EAAOlC,EAASS,EAAa,OAAhF,SAA0F,oCAC1F,wBAAQsE,QAAS,WAAQ,IAAID,EAAgB,YAAOpC,GAASoC,EAAKvE,KAAKE,GAAY2C,EAAQ0B,IAA3F,mBACA,wBAAQC,QAAS,WAAQ5B,EAAO1C,EAAa,OAAQyB,EAAOlC,EAASS,EAAa,SAAlF,eACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,OAAQyB,EAAOlC,EAASS,EAAa,SAAlF,oBACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,OAAQyB,EAAOlC,EAASS,EAAa,SAAlF,kBACA,wBAAQsE,QAAS,WAAQ5B,EAAO1C,EAAa,OAAQyB,EAAOlC,EAASS,EAAa,SAAlF,uBAGR,qBAAK+C,GAAG,UAAR,SAEQd,EAAQsC,KACJ,SAACC,EAAGtC,GAAJ,OACA,cAAC,EAAD,CACAC,WAAYA,EAEZ5C,SAAUA,EACV+C,IAAKA,EACLJ,MAAOA,EACP1C,KAAMgF,EACNvC,QAASA,GALJC,YCtGVuC,MANf,WACE,OACI,cAAC,EAAD,KCQSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0105a4a2.chunk.js","sourcesContent":["// TODO: improve evaluate function and test it for any bugs. Need to add exponents and parenthesis\r\n// TODO: account for postfix not evaluating right because of negative numbers ( we did but i just checked the next index to see if it was a number )\r\n// TODO: adding parenthesis - I think I am done. ( need to test)\r\n// TODO: adding exponents - I think I am done. ( need to test)\r\n// TODO: need to polish things up ( like when an operator is missing one of its parameters )\r\n\r\n\r\n/*\r\nexpression playground\r\n\r\n3*(3+4)\r\n\r\n4 3 + 3 *\r\n\r\n3*(3+4*3)\r\n\r\n3 3 4 3\r\n* ( + * )\r\n\r\n3*(3*4+3)\r\n\r\n3 ,3 4 *, 3\r\n* ( + )\r\n\r\n\r\n3*(3-3*6+15)\r\n\r\n3,3 3 6 *-, 15\r\n* ( + )\r\n*/\r\nexport const evaluate = (expr: string): number => {\r\n    let exp: string = \"\";\r\n    for (let i = 0; i < expr.length; i++) {\r\n        if (expr[i] === \" \") {\r\n            continue;\r\n        }\r\n        exp += expr[i];\r\n    }\r\n    // if the expression isn't finished yet then return NaN\r\n    switch(exp[exp.length-1]){\r\n        case'.':\r\n        case'^':\r\n        case'*':\r\n        case'/':\r\n        case'+':\r\n        case'-': return NaN;\r\n        default: break;\r\n    }\r\n    // just in case there are parentheses that don't match up.\r\n    let opening_p : Array<string> = [];\r\n    for (let i = 0; i < exp.length; i++){\r\n        if (exp[i] === '('){\r\n            opening_p.push(exp[i]);\r\n        }\r\n        else if (exp[i] === ')' && opening_p.length > 0 && opening_p[opening_p.length-1] === '('){\r\n            opening_p.pop();\r\n        }\r\n    }\r\n    // if there aren't matching parentheses, then return NaN.\r\n    if (opening_p.length > 0) return NaN;\r\n\r\n    let expression: Array<string> = [], operators: Array<string> = [], temp: string = \"\";\r\n    //console.log(\"Expression: \", exp);\r\n    // ---------------------------------------------------------- BEGINNING OF POSTFIX CONVERSION\r\n    for (let i = 0; i < exp.length; i++){\r\n        // console.log(\"Temp: \", temp);\r\n        if (exp[i] === '('){\r\n            operators.push(exp[i]);\r\n            continue;\r\n        }\r\n        if (exp[i] === ')'){\r\n            if (temp.length > 0){\r\n                expression.push(temp);\r\n                temp = \"\";\r\n            }\r\n            if (operators[operators.length-1] !== '('){\r\n                while (operators.length > 0 && operators[operators.length-1] !== '('){\r\n                    let one : string | undefined = expression.pop();\r\n                    let two : string | undefined = expression.pop();\r\n                    let op : string | undefined = operators.pop();\r\n                    if (one !== undefined && two !== undefined && op !== undefined){\r\n                        switch(op){\r\n                            case '^':\r\n                            case '+':\r\n                            case '-': expression.push(two + \" \" + one + op); break;\r\n                            case '*':\r\n                            case '/': expression.push(one + \" \" + two + op); break;\r\n                            default: break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let t : string | undefined = expression.pop();\r\n                if (t !== undefined){\r\n                    temp = t;\r\n                }\r\n            }\r\n            // if statement is here for when the first if that checks if the top operator is not an opening parentheses\r\n            if (operators[operators.length-1] === '('){\r\n                operators.pop();\r\n            }\r\n            continue;\r\n        }\r\n        if (exp[i] === '*' || exp[i] === '/' || exp[i] === '+' || (exp[i] === '-' && temp.length > 0) || exp[i] === '^'){\r\n            // console.log(\"operator\", exp[i]);\r\n            if (temp.length > 0){\r\n                expression.push(temp);\r\n                temp = \"\";\r\n            }\r\n            if (expression.length >= 2){\r\n                // same code over and over again but easier to read and understand because less things cluttered into boolean conditions\r\n                if (operators.length > 0 && operators[operators.length-1] === '^'){\r\n                    let one : string | undefined = expression.pop();\r\n                    let two : string | undefined = expression.pop();\r\n                    let op : string | undefined = operators.pop();\r\n                    if (one !== undefined && two !== undefined && op !== undefined){\r\n                        expression.push(two + \" \" + one + op);\r\n                    }\r\n                }\r\n                if (operators.length > 0 && (operators[operators.length-1] === '*' || operators[operators.length-1] === '/') && exp[i] !== '^'){\r\n                    let one : string | undefined = expression.pop();\r\n                    let two : string | undefined = expression.pop();\r\n                    let op : string | undefined = operators.pop();\r\n                    if (one !== undefined && two !== undefined && op !== undefined){\r\n                        expression.push(one + \" \" + two + op);\r\n                    }\r\n                }\r\n                if (operators.length > 0 && (operators[operators.length-1] === '+' || operators[operators.length-1] === '-') && exp[i] !== '*' && exp[i] !== '/' && exp[i] !== '^') {\r\n                    let one : string | undefined = expression.pop();\r\n                    let two : string | undefined = expression.pop();\r\n                    let op : string | undefined = operators.pop();\r\n                    if (one !== undefined && two !== undefined && op !== undefined){\r\n                        expression.push(two + \" \" + one + op);\r\n                    }\r\n                }\r\n            }\r\n            operators.push(exp[i]);\r\n        }\r\n        else {\r\n            temp += exp[i];\r\n        }\r\n    }\r\n    if (temp.length > 0){\r\n        // console.log(\"done loop: \", temp);\r\n        expression.push(temp);\r\n    }\r\n    // console.log(\"before while: \" , expression, operators);\r\n    let counter = 0;\r\n    while (operators.length > 0 && expression.length >= 2){\r\n        counter++;\r\n        if (counter >= 3000) {\r\n            throw new Error(\"inf loop\");\r\n        }\r\n        if (operators.length > 0 && operators[operators.length-1] === '^') {\r\n            let one : string | undefined = expression.pop();\r\n            let two : string | undefined = expression.pop();\r\n            let op : string | undefined = operators.pop();\r\n            if (one !== undefined && two !== undefined && op !== undefined){\r\n                expression.push(two + \" \" + one + op);\r\n            }\r\n        }\r\n        if (operators.length > 0 && (operators[operators.length-1] === '*' || operators[operators.length-1] === '/')){\r\n            let one : string | undefined = expression.pop();\r\n            let two : string | undefined = expression.pop();\r\n            let op : string | undefined = operators.pop();\r\n            if (one !== undefined && two !== undefined && op !== undefined){\r\n                expression.push(one + \" \" + two + op);\r\n            }\r\n        }\r\n        if (operators.length > 0 && (operators[operators.length-1] === '+' || operators[operators.length-1] === '-')) {\r\n            let one : string | undefined = expression.pop();\r\n            let two : string | undefined = expression.pop();\r\n            let op : string | undefined = operators.pop();\r\n            if (one !== undefined && two !== undefined && op !== undefined){\r\n                expression.push(two + \" \" + one + op);\r\n            }\r\n        }\r\n    }\r\n    // ---------------------------------------------------------------------------------------------------------------- END OF POSTFIX CONVERSION\r\n    // after here, just need the postfix expression\r\n    // console.log(\"after while: \", expression, operators);\r\n    let postfix: string | undefined = expression.pop();\r\n    let values: Array<number> = [], tmp: string = \"\";\r\n    if (postfix !== undefined) {\r\n        for (let i = 0; i < postfix.length; i++) {\r\n            // console.log(\"values: \", values, postfix[i], tmp.length > 0, isNaN(parseInt(postfix[i+1])), i+1===postfix.length, tmp.charCodeAt(0), tmp.length);\r\n            if (values.length > 0 && (postfix[i] === \"+\" || (postfix[i] === \"-\" && (tmp.length > 0 || isNaN(parseInt(postfix[i+1])) || i + 1 === postfix.length)) || postfix[i] === \"*\" || postfix[i] === \"/\" || postfix[i] === '^')) {\r\n                if (tmp.length > 0) {\r\n                    values.push(parseFloat(tmp));\r\n                    tmp = \"\";\r\n                }\r\n                let v1: number | undefined = values.pop();\r\n                let v2: number | undefined = values.pop();\r\n                // console.log(\"inside\", v1, v2, postfix[i], parseInt(postfix[i+1]), postfix[i+1], isNaN(parseInt(postfix[i+1])), i + 1 === postfix.length);\r\n                if (v1 !== undefined && v2 !== undefined) {\r\n                    switch (postfix[i]) {\r\n                        case \"+\":\r\n                            values.push(v2 + v1);\r\n                            break;\r\n                        case \"-\":\r\n                            values.push(v2 - v1);\r\n                            break;\r\n                        case \"*\":\r\n                            values.push(v1 * v2);\r\n                            break;\r\n                        case \"/\":\r\n                            values.push(v1 / v2);\r\n                            break;\r\n                        case '^':\r\n                            values.push(Math.pow(v2, v1));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            else if (postfix[i] === \" \") {\r\n                if (tmp.length > 0){\r\n                    values.push(parseFloat(tmp));\r\n                    tmp = \"\";\r\n                }\r\n            } else {\r\n                tmp += postfix[i];\r\n            }\r\n        }\r\n    }\r\n    if (values.length === 0 && postfix !== undefined){\r\n        values.push(parseFloat(postfix));\r\n    }\r\n    return values[0];\r\n  };","import { useEffect, useState } from \"react\";\nimport \"./ExpressionInput.css\";\n\nfunction ExpressionInput(props: any) {\n  const [expr, setExpr] = useState(\"\");\n  const [answer, setAns] = useState(0);\n  useEffect(() => {\n    setExpr(props.expr);\n    setAns(props.evaluate(props.expr));\n  }, [props.expr]);\n  return (\n    <div className=\"type-area\">\n      <input \n            type=\"text\" \n            className=\"in\" \n            onChange={\n                    (e) => { \n                        setExpr(e.target.value); \n                        setAns(props.evaluate(e.target.value)); \n                        props.history[props.index] = e.target.value; \n                        props.changeDisp(e);\n                    }\n            } \n            value={expr}\n            onKeyDown={\n                    (e) => {\n                        if (e.key === \"Backspace\" && expr.length === 0) {\n                            props.del(props.index);\n                        }\n                    }\n            }\n            onFocus={props.changeDisp}\n        ></input>\n      <div className=\"answer\">\n        {expr.length > 0 && !expr.match(/^[A-Za-z]+$/) && answer !== undefined && !isNaN(answer)\n          ? \"= \" + answer\n          : \"\"}\n      </div>\n    </div>\n  );\n}\n\nexport default ExpressionInput;\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { evaluate } from \"../functions/test_functions\";\r\nimport ExpressionInput from \"./ExpressionInput\";\r\n// @ts-ignore\r\nimport MathJax from 'react-mathjax2';\r\nimport \"./Calculator.css\";\r\n// TODO: add other mathematical functions such as cos, sin, tan, etc.\r\n// TODO: add eulers limit ( e = 2.718 )\r\n// TODO: add pi\r\n// TODO: add log and natural log with different bases\r\n// TODO: parse through the expression and change it to a better format like 3^4 should actually have the four above the three using Canvas! We can parse the text and draw certain symbols using canvas.\r\nfunction Calculator() {\r\n    const [expression, setExp] : [string, any] = useState(\"\");\r\n    const [answer, setAns] : [number, any] = useState(0);\r\n    const [history, setHist] : [Array<any>, any] = useState([]);\r\n    const [displayExp, setDispExp] : [string, any] = useState(\"\");\r\n\r\n    const del = (i: number): void => {\r\n        history.splice(i, 1);\r\n        setHist([...history]);\r\n    };\r\n\r\n    const changeDisp = (e:any) :void =>{\r\n        setDispExp('$$'+e.target.value+'$$');\r\n    }\r\n\r\n  return (\r\n    <div id=\"calc\">\r\n        <div id='display'>\r\n            <MathJax.Context\r\n                input='ascii'\r\n                onError={ (MathJax : any, error : any) => {\r\n                    console.warn(error);\r\n                    console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                    MathJax.Hub.Queue(\r\n                        MathJax.Hub.Typeset()\r\n                    );\r\n                } }\r\n                script=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=AM_HTMLorMML\"\r\n                options={ {\r\n                    asciimath2jax: {\r\n                        useMathMLspacing: true,\r\n                        delimiters: [[\"$$\",\"$$\"]],\r\n                        preview: \"none\",\r\n                    },\r\n                    styles: {\r\n                        \"#MathJax_Message\": {\r\n                            display: 'none'\r\n                        }\r\n                    }\r\n                } }\r\n            >\r\n                <MathJax.Text text={ displayExp }/>\r\n            </MathJax.Context>\r\n        </div>\r\n        <div className=\"type-area\">\r\n            <input \r\n                type=\"text\" \r\n                className=\"in\" \r\n                id=\"math\"\r\n                onFocus={changeDisp}\r\n                onChange={(e) => { \r\n                        setExp(e.target.value); \r\n                        setAns(evaluate(e.target.value));\r\n                        changeDisp(e);\r\n                    }\r\n                } \r\n                value={expression} \r\n                onKeyDown={ \r\n                    (e) => {\r\n                        if (e.key === \"Enter\") {\r\n                            let copy: Array<any> = [...history]; \r\n                            copy.push(expression);\r\n                            setHist(copy);\r\n                        }\r\n                    }\r\n                }\r\n            />\r\n            <div className=\"answer\">{\r\n                expression.length > 0 &&\r\n                !expression.match(/^[A-Za-z]+$/) && \r\n                answer !== undefined && \r\n                !isNaN(answer) ? \"= \" + answer : \"\"}</div>\r\n        </div>\r\n        <div id=\"operations\">\r\n            <div id=\"numbers\">\r\n                <button onClick={() => { setExp(expression + 7); setAns(evaluate(expression + 7)); }}>7</button>\r\n                <button onClick={() => { setExp(expression + 8); setAns(evaluate(expression + 8)); }}>8</button>\r\n                <button onClick={() => { setExp(expression + 9); setAns(evaluate(expression + 9)); }}>9</button>\r\n                <button onClick={() => { setExp(expression + 4); setAns(evaluate(expression + 4)); }}>4</button>\r\n                <button onClick={() => { setExp(expression + 5); setAns(evaluate(expression + 5)); }}>5</button>\r\n                <button onClick={() => { setExp(expression + 6); setAns(evaluate(expression + 6)); }}>6</button>\r\n                <button onClick={() => { setExp(expression + 1); setAns(evaluate(expression + 1)); }}>1</button>\r\n                <button onClick={() => { setExp(expression + 2); setAns(evaluate(expression + 2)); }}>2</button>\r\n                <button onClick={() => { setExp(expression + 3); setAns(evaluate(expression + 3)); }}>3</button>\r\n                <button onClick={() => { setExp(expression + 0); setAns(evaluate(expression + 0)); }}>0</button>\r\n                <button onClick={() => { setExp(expression + '.'); setAns(evaluate(expression + '.')); }}><b>.</b></button>\r\n                <button onClick={() => { let copy: Array<any> = [...history];copy.push(expression);setHist(copy); }}>Enter</button>\r\n                <button onClick={() => { setExp(expression + \" + \"); setAns(evaluate(expression + \" + \")); }}>&#43;</button>\r\n                <button onClick={() => { setExp(expression + \" - \"); setAns(evaluate(expression + \" - \")); }}>&#8722;</button>\r\n                <button onClick={() => { setExp(expression + \" * \"); setAns(evaluate(expression + \" * \")); }}>&#215;</button>\r\n                <button onClick={() => { setExp(expression + \" / \"); setAns(evaluate(expression + \" / \")); }}>&#247;</button>\r\n            </div>\r\n        </div>\r\n        <div id=\"history\">\r\n            {\r\n                history.map(\r\n                    (x, index) => ( \r\n                    <ExpressionInput\r\n                    changeDisp={changeDisp}\r\n                    key={index}\r\n                    evaluate={evaluate}\r\n                    del={del}\r\n                    index={index}\r\n                    expr={x}\r\n                    history={history}/>\r\n                ))\r\n            }\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import './App.css';\nimport Calculator from \"./components/Calculator\";\nfunction App() {\n  return (\n      <Calculator></Calculator>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}